import com.zhang.buildSrc.*

plugins {
    id 'com.android.application'
}
apply from: '../common.gradle'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    namespace 'com.zhang.myproject'

    defaultConfig {
        applicationId "com.zhang.myproject"

        versionCode AndroidConfig.versionCode
        versionName AndroidConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'arm64-v8a','armeabi-v7a'
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }

        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {

        debug {
            zipAlignEnabled true
            debuggable true
            minifyEnabled false //是否混淆
            shrinkResources false //是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        release {
            zipAlignEnabled true
            debuggable false
            minifyEnabled true //是否混淆
            shrinkResources true //是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }


    //定义输出文件名
    applicationVariants.all { variant ->
        variant.outputs.all {
            def appName = "demo"
            def time = releaseTime()
            def buildType = variant.buildType.name
            def newName
            if (buildType == 'debug') {
                newName = "${appName}_${defaultConfig.versionCode}_debug.apk"
            } else {
                newName = "${appName}_${defaultConfig.versionName}_${time}_release.apk"
            }
            outputFileName = newName
        }
    }
    // 启用自定义 BuildConfig 字段
    buildFeatures {
        buildConfig = true
    }
}
static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    /** 工具类 library */
    // 业务相关公共类
    implementation project(':library-common')

    /** 业务 module */
    implementation project(':module-home')
    implementation project(':module-found')
    implementation project(':module-amap')
    implementation project(':module-mine')
}